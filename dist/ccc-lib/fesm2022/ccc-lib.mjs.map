{"version":3,"file":"ccc-lib.mjs","sources":["../../../projects/ccc-lib/src/lib/state/core.actions.ts","../../../projects/ccc-lib/src/lib/models/permission-domain.ts","../../../projects/ccc-lib/src/lib/service/request-options.ts","../../../projects/ccc-lib/src/lib/service/auth.service.ts","../../../projects/ccc-lib/src/lib/service/error.service.ts","../../../projects/ccc-lib/src/lib/state/core.state.ts","../../../projects/ccc-lib/src/lib/guards/authorization.guard.ts","../../../projects/ccc-lib/src/lib/guards/authentication.guard.ts","../../../projects/ccc-lib/src/lib/models/error-message.ts","../../../projects/ccc-lib/src/lib/interceptor/api.interceptor.ts","../../../projects/ccc-lib/src/lib/components/alert/alert.component.ts","../../../projects/ccc-lib/src/lib/components/alert/alert.component.html","../../../projects/ccc-lib/src/public-api.ts","../../../projects/ccc-lib/src/ccc-lib.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-namespace */\n// no-namespace rule is disabled because action hygiene prevents import pollution\n\nimport { ErrorMessage } from '../models/error-message';\n\nexport namespace AuthenticationGuardAction {\n  export class SetRedirectUrl {\n    static readonly type =\n      '[AuthenticationGuard] Set Redirect Url And Navigate To Login Page';\n    constructor(public redirectUrl: string) {}\n  }\n\n  export class CheckUserSession {\n    static readonly type = '[AuthenticationGuard] Check User Session';\n  }\n}\n\nexport namespace ApiInterceptorAction {\n  export class BeginActivity {\n    static readonly type = '[ApiInterceptor] Add Loading Activity';\n    constructor(public process: string) {}\n  }\n  export class EndActivity {\n    static readonly type = '[ApiInterceptor] Remove Loading Activity';\n    constructor(public process: string) {}\n  }\n  export class SetRedirectUrl {\n    static readonly type = '[ApiInterceptor] Set Redirect Url';\n    constructor(public redirectUrl: string) {}\n  }\n\n  export class PublishError {\n    static readonly type = '[ApiInterceptor] Publish Error';\n    constructor(public message: ErrorMessage) {}\n  }\n}\n\nexport namespace LoginAction {\n  export class Logout {\n    static readonly type = '[Login] Auto Logout';\n  }\n\n  export class SetRedirectUrl {\n    static readonly type = '[Login] Set Redirect Url';\n    constructor(public redirectUrl: string) {}\n  }\n\n  export class PublishError {\n    static readonly type = '[Login] Publish Error';\n    constructor(public message: ErrorMessage) {}\n  }\n}\n\nexport namespace AppAction {\n  export class CheckUserSession {\n    static readonly type = '[App] Check User Session';\n  }\n\n  export class SetRedirectUrl {\n    static readonly type = '[App] Set Redirect Url';\n    constructor(public redirectUrl: string) {}\n  }\n}\n\nexport namespace HeaderAction {\n  export class ToggleSidenav {\n    static readonly type = '[Header] Toggle Sidenav';\n  }\n\n  export class Logout {\n    static readonly type = '[Header] User Logout';\n  }\n}\n","export enum Domain {\n  Global = 0,\n}\n","import { HttpContext, HttpContextToken } from '@angular/common/http';\n\nexport interface CustomHttpRequestOptions {\n  suppressGlobalError: boolean;\n}\n\nexport const CUSTOM_HTTP_REQUEST_OPTIONS = new HttpContextToken<CustomHttpRequestOptions>(() => ({\n  suppressGlobalError: false,\n}));\n\nexport function errorOptions(suppressGlobalError: boolean | undefined): { context: HttpContext } {\n  return {\n    context: new HttpContext().set(CUSTOM_HTTP_REQUEST_OPTIONS, {\n      suppressGlobalError: suppressGlobalError ?? false,\n    }),\n  };\n}\n","import { HttpClient } from '@angular/common/http';\nimport { inject, Inject, Injectable, InjectionToken } from '@angular/core';\nimport { Observable, map } from 'rxjs';\nimport { errorOptions } from './request-options';\nimport { SessionInfo } from '../models/session-info';\n\nconst routes = {\n  login: (rootUrl: string): string => `${rootUrl}/user/login`,\n  session: (rootUrl: string): string => `${rootUrl}/user/session`,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  API_URL = new InjectionToken<string>('apiUrl');\n  apiUrl = inject(this.API_URL);\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Logs a user out.\n   *\n   * @returns Observable with a boolean indicating whether they were logged out.\n   */\n  logout(): Observable<boolean> {\n    return this.http\n      .delete(routes.session(this.apiUrl), errorOptions(false))\n      .pipe(map(() => true));\n  }\n\n  /**\n   * Checks a user's session with the server.\n   *\n   * @returns Observable with the user session info\n   */\n  checkUserSession(): Observable<SessionInfo | null> {\n    return this.http.get<SessionInfo>(\n      routes.session(this.apiUrl),\n      errorOptions(false)\n    );\n  }\n\n  loginRoute(): string {\n    return routes.login(this.apiUrl);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ErrorMessage } from '../models/error-message';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ErrorService {\n  errorMessages = new BehaviorSubject<ErrorMessage[]>([]);\n  errorId = 0;\n\n  addGlobalError(error: ErrorMessage): number {\n    error.id = this.errorId++;\n    this.errorMessages.next([...this.errorMessages.value, error]);\n    return error.id;\n  }\n\n  dismissGlobalErrorById(errorId: number): void {\n    this.errorMessages.next(\n      this.errorMessages.value.filter((a) => !(a.id === errorId))\n    );\n  }\n\n  dismissGlobalError(error: ErrorMessage): void {\n    if (error.id !== undefined) {\n      this.dismissGlobalErrorById(error.id);\n    }\n  }\n\n  updateError(error: ErrorMessage): void {\n    this.errorMessages.next(\n      this.errorMessages.value.map((a) => {\n        if (a.id === error.id) {\n          return error;\n        }\n        return a;\n      })\n    );\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\nimport {\n  ApiInterceptorAction,\n  AppAction,\n  AuthenticationGuardAction,\n  LoginAction,\n  HeaderAction,\n} from './core.actions';\nimport { Observable, tap } from 'rxjs';\nimport { patch } from '@ngxs/store/operators';\nimport { SessionInfo } from '../models/session-info';\nimport { Domain } from '../models/permission-domain';\nimport { ErrorMessage } from '../models/error-message';\nimport { AuthService } from '../service/auth.service';\nimport { ErrorService } from '../service/error.service';\nimport { cloneDeep } from 'lodash-es';\n\nexport interface CoreStateModel {\n  loading: string[];\n  sidenavOpened: boolean;\n  auth: {\n    authenticated: boolean;\n    redirectUrl: string;\n    sessionInfo: SessionInfo | null;\n  };\n}\n\nexport const initState: CoreStateModel = {\n  loading: [],\n  sidenavOpened: true,\n  auth: {\n    authenticated: false,\n    redirectUrl: '',\n    sessionInfo: null,\n  },\n};\n\n@State<CoreStateModel>({\n  name: 'coreState',\n  defaults: initState,\n})\n@Injectable()\nexport class CoreState {\n  private authService = inject(AuthService);\n  private errors = inject(ErrorService);\n\n  @Selector()\n  static sidenavOpened(state: CoreStateModel): boolean {\n    return state?.sidenavOpened;\n  }\n\n  @Selector()\n  static permissions(state: CoreStateModel): string[] | undefined {\n    return state?.auth.sessionInfo?.permissions[Domain.Global];\n  }\n\n  @Selector()\n  static hasPermission(\n    state: CoreStateModel\n  ): (permissions: string[]) => boolean {\n    return (permissions: string[]): boolean => {\n      if (state?.auth.sessionInfo?.permissions[Domain.Global]) {\n        return state.auth.sessionInfo.permissions[Domain.Global].some(\n          (p: string) => permissions.includes(p)\n        );\n      }\n\n      return false;\n    };\n  }\n\n  @Selector()\n  static isAuthenticated(state: CoreStateModel): boolean {\n    return state?.auth.authenticated;\n  }\n\n  @Selector()\n  static redirectUrl(state: CoreStateModel): string {\n    return state?.auth.redirectUrl;\n  }\n\n  @Selector()\n  static isLoading(state: CoreStateModel): boolean {\n    return state.loading.length > 0;\n  }\n\n  @Action([ApiInterceptorAction.PublishError, LoginAction.PublishError])\n  publishError(\n    ctx: StateContext<CoreStateModel>,\n    action: { message: ErrorMessage }\n  ): void {\n    this.errors.addGlobalError(action.message);\n  }\n\n  @Action([\n    AppAction.CheckUserSession,\n    AuthenticationGuardAction.CheckUserSession,\n  ])\n  checkUserSession(\n    ctx: StateContext<CoreStateModel>\n  ): Observable<SessionInfo | null> {\n    return this.authService.checkUserSession().pipe(\n      tap((result) =>\n        ctx.setState(\n          patch({\n            auth: patch({\n              authenticated: !!result?.authenticated,\n              sessionInfo: result,\n            }),\n          })\n        )\n      )\n    );\n  }\n\n  @Action([LoginAction.Logout])\n  logout(ctx: StateContext<CoreStateModel>): Observable<boolean> {\n    const localStateCopy = cloneDeep(initState);\n    localStateCopy.auth.redirectUrl = ctx.getState().auth.redirectUrl;\n    return this.authService.logout().pipe(\n      tap(() => {\n        ctx.setState(localStateCopy);\n      })\n    );\n  }\n\n  @Action([\n    AppAction.SetRedirectUrl,\n    LoginAction.SetRedirectUrl,\n    AuthenticationGuardAction.SetRedirectUrl,\n    ApiInterceptorAction.SetRedirectUrl,\n  ])\n  setRedirectUrl(\n    ctx: StateContext<CoreStateModel>,\n    action: { redirectUrl: string }\n  ): CoreStateModel {\n    ctx.setState(\n      patch({\n        auth: patch({\n          redirectUrl: action.redirectUrl,\n        }),\n      })\n    );\n    return ctx.getState();\n  }\n\n  @Action([ApiInterceptorAction.BeginActivity])\n  beginActivity(\n    ctx: StateContext<CoreStateModel>,\n    action: { process: string }\n  ): CoreStateModel {\n    const state = ctx.getState();\n    ctx.patchState({\n      loading: [action.process, ...state.loading],\n    });\n    return ctx.getState();\n  }\n\n  @Action([ApiInterceptorAction.EndActivity])\n  endActivity(\n    ctx: StateContext<CoreStateModel>,\n    action: { process: string }\n  ): CoreStateModel | null {\n    const loading = ctx.getState().loading;\n    // There can be multiple activities running with the same process signature\n    const index = loading.findIndex((activity) => activity === action.process);\n    if (index !== -1) {\n      const newLoading = [\n        ...loading.slice(0, index),\n        ...loading.slice(index + 1),\n      ];\n      ctx.patchState({\n        loading: newLoading,\n      });\n      return ctx.getState();\n    }\n    return null;\n  }\n\n  @Action([HeaderAction.ToggleSidenav])\n  toggleSidenav(ctx: StateContext<CoreStateModel>): void {\n    ctx.setState(\n      patch({\n        sidenavOpened: !ctx.getState().sidenavOpened,\n      })\n    );\n  }\n}\n","import { inject } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { map, Observable } from 'rxjs';\nimport { CoreState } from '../state/core.state';\n\nexport const AuthorizationGuard = (\n  route: ActivatedRouteSnapshot\n): Observable<boolean> => {\n  const store = inject(Store);\n  const router = inject(Router);\n  return store.select(CoreState.hasPermission).pipe(\n    map((permissionFn) => permissionFn(route.data['permissions'])),\n    map((hasPermission) => {\n      if (hasPermission) {\n        return true;\n      }\n      router.navigate(['/']);\n      return false;\n    })\n  );\n};\n","import { inject, InjectionToken } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { of, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../service/auth.service';\nimport { CoreState } from '../state/core.state';\nimport { AuthenticationGuardAction } from '../state/core.actions';\n\nexport const AuthenticationGuard = (\n  route: ActivatedRouteSnapshot,\n  routerState: RouterStateSnapshot\n): Observable<boolean> => {\n  const store = inject(Store);\n  const authService = inject(AuthService);\n\n  const API_URL = new InjectionToken<string>('apiUrl');\n  const apiUrl = inject(API_URL);\n\n  const authenticate = (): void => {\n    const url = routerState.url;\n    const absoluteUrl =\n      apiUrl + (!url.toString().startsWith('/') ? '/' + url : url);\n    const encodedUrl = encodeURIComponent(absoluteUrl);\n    window.location.href = `${authService.loginRoute()}?returnUrl=${encodedUrl}`;\n  };\n\n  return store.select(CoreState.isAuthenticated).pipe(\n    switchMap((authenticated) => {\n      if (authenticated) {\n        return of(authenticated);\n      }\n      // Handle uninitialized state (ie Browser reload)\n      return store.dispatch(AuthenticationGuardAction.CheckUserSession).pipe(\n        switchMap(() => {\n          return store.select(CoreState.isAuthenticated);\n        })\n      );\n    }),\n    map((authenticated) => {\n      if (authenticated) {\n        return true;\n      }\n\n      authenticate();\n\n      return false;\n    }),\n    catchError(() => {\n      authenticate();\n\n      return of(false);\n    })\n  );\n};\n","export enum AlertLevel {\n  ERROR = 'warn',\n  INFO = 'accent',\n}\n\nexport interface ErrorMessage {\n  id?: number;\n  duration?: number;\n  message: string;\n  link: string;\n  level: AlertLevel;\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { inject, Injectable, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { catchError, finalize, Observable, throwError } from 'rxjs';\nimport { CUSTOM_HTTP_REQUEST_OPTIONS } from '../service/request-options';\nimport { AlertLevel } from '../models/error-message';\nimport { ApiInterceptorAction } from '../state/core.actions';\n\n@Injectable()\nexport class ApiInterceptor implements HttpInterceptor {\n  private store = inject(Store);\n  private router = inject(Router);\n  private ngZone = inject(NgZone);\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    this.store.dispatch(\n      new ApiInterceptorAction.BeginActivity(request.method + ' ' + request.url)\n    );\n\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse): Observable<HttpEvent<unknown>> => {\n        if (error.status === 401) {\n          this.ngZone.run(() => {\n            this.store.dispatch(\n              new ApiInterceptorAction.SetRedirectUrl(this.router.url)\n            );\n            this.router.navigate(['/login']);\n          });\n        }\n        if (\n          !request.context.get(CUSTOM_HTTP_REQUEST_OPTIONS).suppressGlobalError\n        ) {\n          const message = error.error?.message ?? error.message ?? error.error;\n          this.store.dispatch(\n            new ApiInterceptorAction.PublishError({\n              message: message,\n              level: AlertLevel.ERROR,\n              link: '',\n            })\n          );\n        }\n\n        return throwError(() => error);\n      }),\n      finalize(() => {\n        this.store.dispatch(\n          new ApiInterceptorAction.EndActivity(\n            request.method + ' ' + request.url\n          )\n        );\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  inject,\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { ErrorMessage } from '../../models/error-message';\nimport { ErrorService } from '../../service/error.service';\n\n@Component({\n  selector: 'app-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss'],\n  standalone: true,\n  imports: [MatIconModule, MatButtonModule, CommonModule, RouterModule],\n})\nexport class AlertComponent implements OnInit {\n  @Input({ required: true }) error!: ErrorMessage;\n  @Output() dismiss = new EventEmitter();\n\n  errors = inject(ErrorService);\n  ngOnInit(): void {\n    if (this.error.duration === undefined) {\n      this.error.duration = 30000;\n    }\n\n    setTimeout(() => {\n      this.dismissAlert();\n    }, this.error.duration);\n  }\n\n  dismissAlert(): void {\n    if (this.error.id !== undefined) {\n      this.errors.dismissGlobalError(this.error);\n    }\n  }\n}\n","<div class=\"alert\" [ngClass]=\"error.level\">\n  <div class=\"message\">\n    <span>{{ error.message }}</span>\n  </div>\n  <div class=\"alert-end\">\n    @if (error.link) {\n    <span [routerLink]=\"error.link\" class=\"link\">View</span>\n    }\n    <button (click)=\"dismissAlert()\" mat-icon-button aria-label=\"Close Alert\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n</div>\n","/*\n * Public API Surface of ccc-lib\n */\n\n// Guards\nexport * from './lib/guards/authorization.guard';\nexport * from './lib/guards/authentication.guard';\n\n// Services\nexport * from './lib/service/auth.service';\nexport * from './lib/service/error.service';\nexport * from './lib/service/request-options';\n\n// State\nexport * from './lib/state/core.actions';\nexport * from './lib/state/core.state';\n\n// Interceptor\nexport * from './lib/interceptor/api.interceptor';\n\n// Models\nexport * from './lib/models/error-message';\nexport * from './lib/models/session-info';\nexport * from './lib/models/permission-domain';\n\n// Components\nexport * from './lib/components/alert/alert.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["map","catchError"],"mappings":"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"}