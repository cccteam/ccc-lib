import { __decorate } from "tslib";
import { Injectable, inject } from '@angular/core';
import { Action, Selector, State } from '@ngxs/store';
import { ApiInterceptorAction, AppAction, AuthenticationGuardAction, LoginAction, HeaderAction, } from './core.actions';
import { tap } from 'rxjs';
import { patch } from '@ngxs/store/operators';
import { Domain } from '../models/permission-domain';
import { AuthService } from '../service/auth.service';
import { ErrorService } from '../service/error.service';
import { cloneDeep } from 'lodash-es';
import * as i0 from "@angular/core";
export const initState = {
    loading: [],
    sidenavOpened: true,
    auth: {
        authenticated: false,
        redirectUrl: '',
        sessionInfo: null,
    },
};
let CoreState = class CoreState {
    authService = inject(AuthService);
    errors = inject(ErrorService);
    static sidenavOpened(state) {
        return state?.sidenavOpened;
    }
    static permissions(state) {
        return state?.auth.sessionInfo?.permissions[Domain.Global];
    }
    static hasPermission(state) {
        return (permissions) => {
            if (state?.auth.sessionInfo?.permissions[Domain.Global]) {
                return state.auth.sessionInfo.permissions[Domain.Global].some((p) => permissions.includes(p));
            }
            return false;
        };
    }
    static isAuthenticated(state) {
        return state?.auth.authenticated;
    }
    static redirectUrl(state) {
        return state?.auth.redirectUrl;
    }
    static isLoading(state) {
        return state.loading.length > 0;
    }
    publishError(ctx, action) {
        this.errors.addGlobalError(action.message);
    }
    checkUserSession(ctx) {
        return this.authService.checkUserSession().pipe(tap((result) => ctx.setState(patch({
            auth: patch({
                authenticated: !!result?.authenticated,
                sessionInfo: result,
            }),
        }))));
    }
    logout(ctx) {
        const localStateCopy = cloneDeep(initState);
        localStateCopy.auth.redirectUrl = ctx.getState().auth.redirectUrl;
        return this.authService.logout().pipe(tap(() => {
            ctx.setState(localStateCopy);
        }));
    }
    setRedirectUrl(ctx, action) {
        ctx.setState(patch({
            auth: patch({
                redirectUrl: action.redirectUrl,
            }),
        }));
        return ctx.getState();
    }
    beginActivity(ctx, action) {
        const state = ctx.getState();
        ctx.patchState({
            loading: [action.process, ...state.loading],
        });
        return ctx.getState();
    }
    endActivity(ctx, action) {
        const loading = ctx.getState().loading;
        // There can be multiple activities running with the same process signature
        const index = loading.findIndex((activity) => activity === action.process);
        if (index !== -1) {
            const newLoading = [
                ...loading.slice(0, index),
                ...loading.slice(index + 1),
            ];
            ctx.patchState({
                loading: newLoading,
            });
            return ctx.getState();
        }
        return null;
    }
    toggleSidenav(ctx) {
        ctx.setState(patch({
            sidenavOpened: !ctx.getState().sidenavOpened,
        }));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.7", ngImport: i0, type: CoreState, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.7", ngImport: i0, type: CoreState });
};
__decorate([
    Action([ApiInterceptorAction.PublishError, LoginAction.PublishError])
], CoreState.prototype, "publishError", null);
__decorate([
    Action([
        AppAction.CheckUserSession,
        AuthenticationGuardAction.CheckUserSession,
    ])
], CoreState.prototype, "checkUserSession", null);
__decorate([
    Action([LoginAction.Logout])
], CoreState.prototype, "logout", null);
__decorate([
    Action([
        AppAction.SetRedirectUrl,
        LoginAction.SetRedirectUrl,
        AuthenticationGuardAction.SetRedirectUrl,
        ApiInterceptorAction.SetRedirectUrl,
    ])
], CoreState.prototype, "setRedirectUrl", null);
__decorate([
    Action([ApiInterceptorAction.BeginActivity])
], CoreState.prototype, "beginActivity", null);
__decorate([
    Action([ApiInterceptorAction.EndActivity])
], CoreState.prototype, "endActivity", null);
__decorate([
    Action([HeaderAction.ToggleSidenav])
], CoreState.prototype, "toggleSidenav", null);
__decorate([
    Selector()
], CoreState, "sidenavOpened", null);
__decorate([
    Selector()
], CoreState, "permissions", null);
__decorate([
    Selector()
], CoreState, "hasPermission", null);
__decorate([
    Selector()
], CoreState, "isAuthenticated", null);
__decorate([
    Selector()
], CoreState, "redirectUrl", null);
__decorate([
    Selector()
], CoreState, "isLoading", null);
CoreState = __decorate([
    State({
        name: 'coreState',
        defaults: initState,
    })
], CoreState);
export { CoreState };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImport: i0, type: CoreState, decorators: [{
            type: Injectable
        }], propDecorators: { publishError: [], checkUserSession: [], logout: [], setRedirectUrl: [], beginActivity: [], endActivity: [], toggleSidenav: [] } });
//# sourceMappingURL=data:application/json;base64,