import { inject } from "@angular/core";
import { Store } from "@ngxs/store";
import { of } from "rxjs";
import { catchError, map, switchMap } from "rxjs/operators";
import { BASE_URL } from "../base/tokens";
import { AuthService } from "../service/auth.service";
import { AuthenticationGuardAction } from "../state/core.actions";
import { CoreState } from "../state/core.state";
export const AuthenticationGuard = (route, routerState) => {
    const store = inject(Store);
    const authService = inject(AuthService);
    const baseUrl = inject(BASE_URL);
    const authenticate = () => {
        const url = routerState.url;
        const absoluteUrl = baseUrl + (!url.toString().startsWith("/") ? "/" + url : url);
        const encodedUrl = encodeURIComponent(absoluteUrl);
        window.location.href = `${authService.loginRoute()}?returnUrl=${encodedUrl}`;
    };
    return store.select(CoreState.isAuthenticated).pipe(switchMap((authenticated) => {
        if (authenticated) {
            return of(authenticated);
        }
        // Handle uninitialized state (ie Browser reload)
        return store.dispatch(AuthenticationGuardAction.CheckUserSession).pipe(switchMap(() => {
            return store.select(CoreState.isAuthenticated);
        }));
    }), map((authenticated) => {
        if (authenticated) {
            return true;
        }
        authenticate();
        return false;
    }), catchError(() => {
        authenticate();
        return of(false);
    }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uZ3VhcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jY2MtbGliL3NyYy9saWIvZ3VhcmRzL2F1dGhlbnRpY2F0aW9uLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWhELE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQ2pDLEtBQTZCLEVBQzdCLFdBQWdDLEVBQ1gsRUFBRTtJQUN2QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRXhDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVqQyxNQUFNLFlBQVksR0FBRyxHQUFTLEVBQUU7UUFDOUIsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQztRQUM1QixNQUFNLFdBQVcsR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsV0FBVyxDQUFDLFVBQVUsRUFBRSxjQUFjLFVBQVUsRUFBRSxDQUFDO0lBQy9FLENBQUMsQ0FBQztJQUVGLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUNqRCxTQUFTLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRTtRQUMxQixJQUFJLGFBQWEsRUFBRSxDQUFDO1lBQ2xCLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNCLENBQUM7UUFDRCxpREFBaUQ7UUFDakQsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUNwRSxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2IsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQyxDQUFDLEVBQ0YsR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUU7UUFDcEIsSUFBSSxhQUFhLEVBQUUsQ0FBQztZQUNsQixPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxZQUFZLEVBQUUsQ0FBQztRQUVmLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxDQUFDLEVBQ0YsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFlBQVksRUFBRSxDQUFDO1FBRWYsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXJTdGF0ZVNuYXBzaG90IH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgU3RvcmUgfSBmcm9tIFwiQG5neHMvc3RvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5pbXBvcnQgeyBCQVNFX1VSTCB9IGZyb20gXCIuLi9iYXNlL3Rva2Vuc1wiO1xuaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZS9hdXRoLnNlcnZpY2VcIjtcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uR3VhcmRBY3Rpb24gfSBmcm9tIFwiLi4vc3RhdGUvY29yZS5hY3Rpb25zXCI7XG5pbXBvcnQgeyBDb3JlU3RhdGUgfSBmcm9tIFwiLi4vc3RhdGUvY29yZS5zdGF0ZVwiO1xuXG5leHBvcnQgY29uc3QgQXV0aGVudGljYXRpb25HdWFyZCA9IChcbiAgcm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXG4gIHJvdXRlclN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XG4pOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0+IHtcbiAgY29uc3Qgc3RvcmUgPSBpbmplY3QoU3RvcmUpO1xuICBjb25zdCBhdXRoU2VydmljZSA9IGluamVjdChBdXRoU2VydmljZSk7XG5cbiAgY29uc3QgYmFzZVVybCA9IGluamVjdChCQVNFX1VSTCk7XG5cbiAgY29uc3QgYXV0aGVudGljYXRlID0gKCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IHVybCA9IHJvdXRlclN0YXRlLnVybDtcbiAgICBjb25zdCBhYnNvbHV0ZVVybCA9IGJhc2VVcmwgKyAoIXVybC50b1N0cmluZygpLnN0YXJ0c1dpdGgoXCIvXCIpID8gXCIvXCIgKyB1cmwgOiB1cmwpO1xuICAgIGNvbnN0IGVuY29kZWRVcmwgPSBlbmNvZGVVUklDb21wb25lbnQoYWJzb2x1dGVVcmwpO1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYCR7YXV0aFNlcnZpY2UubG9naW5Sb3V0ZSgpfT9yZXR1cm5Vcmw9JHtlbmNvZGVkVXJsfWA7XG4gIH07XG5cbiAgcmV0dXJuIHN0b3JlLnNlbGVjdChDb3JlU3RhdGUuaXNBdXRoZW50aWNhdGVkKS5waXBlKFxuICAgIHN3aXRjaE1hcCgoYXV0aGVudGljYXRlZCkgPT4ge1xuICAgICAgaWYgKGF1dGhlbnRpY2F0ZWQpIHtcbiAgICAgICAgcmV0dXJuIG9mKGF1dGhlbnRpY2F0ZWQpO1xuICAgICAgfVxuICAgICAgLy8gSGFuZGxlIHVuaW5pdGlhbGl6ZWQgc3RhdGUgKGllIEJyb3dzZXIgcmVsb2FkKVxuICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKEF1dGhlbnRpY2F0aW9uR3VhcmRBY3Rpb24uQ2hlY2tVc2VyU2Vzc2lvbikucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gc3RvcmUuc2VsZWN0KENvcmVTdGF0ZS5pc0F1dGhlbnRpY2F0ZWQpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KSxcbiAgICBtYXAoKGF1dGhlbnRpY2F0ZWQpID0+IHtcbiAgICAgIGlmIChhdXRoZW50aWNhdGVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBhdXRoZW50aWNhdGUoKTtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pLFxuICAgIGNhdGNoRXJyb3IoKCkgPT4ge1xuICAgICAgYXV0aGVudGljYXRlKCk7XG5cbiAgICAgIHJldHVybiBvZihmYWxzZSk7XG4gICAgfSlcbiAgKTtcbn07XG4iXX0=